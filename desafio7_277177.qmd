---
title: "Desafio 7"
author: "Joaquim Bertoldi Nucci - RA: 277177"
format: html
editor: visual
---

```{r}
library(RSQLite)
library(tidyverse)
if(!"discoCopy.db" %in% list.files("dados/")){
file.copy("dados/disco.db", "dados/discoCopy.db")
} 
```

```{r}
db <- dbConnect(SQLite(), "dados/discoCopy.db")
```

```{r}
dbListTables(db)
```

```{r}
dbExecute(db, "CREATE TABLE IF NOT EXISTS instruments (
    AlbumId INTEGER,
    TrackId INTEGER,
    ElectricGuitar INTEGER,
    Singer INTEGER,
    Trumpet INTEGER)")
```

```{r}
dbListFields(db, 'instruments')
```

```{r}
dbExecute(db, "DROP TABLE instruments")
```

```{r}
dbListTables(db)
```

```{r}
aname = "Gilberto Gil"
sql = paste0("SELECT ArtistId FROM artists ", "WHERE Name = '", aname, "'")
aId = dbGetQuery(db, sql)
sql = paste('SELECT Title FROM albums', 'WHERE ArtistId =', aId)
dbGetQuery(db, sql)
```

```{r}
sql = paste("SELECT ArtistId FROM artists", "WHERE Name = ?")
query <- dbSendQuery(db, sql)
dbBind(query, list("Gilberto Gil"))
aId <- dbFetch(query)
dbClearResult(query)
sql = paste('SELECT Title FROM albums', 'WHERE ArtistId =', aId)
dbGetQuery(db, sql)
```

```{r}
dbExecute(db,"CREATE TABLE instruments (AlbumId INTEGER, TrackId INTEGER, ElectricGuitar INTEGER, Singer INTEGER, Trumpet INTEGER)")
dbListFields(db, 'instruments')
```

```{r}
sql = paste('SELECT TrackId, Name FROM tracks', 
            'WHERE AlbumId = 85')
dbGetQuery(db, sql) %>% head
```

```{r}
# Eu Tu Eles: AlbumId 85,
sql = paste('SELECT TrackId, Name FROM tracks',
            'WHERE AlbumId = 85')
dbGetQuery(db, sql) %>% head
```

```{r}
dbExecute(db,
"INSERT INTO instruments VALUES ('85', '1075', 0, 1, 0),
('85', '1078', 0, 1, 0); ")
```

```{r}
dbGetQuery(db, "SELECT * FROM instruments")
```

```{r}
dbWriteTable(db, "mtcars", mtcars, overwrite = TRUE)
dbListTables(db)
```

```{r}
dbGetQuery(db, "SELECT * FROM mtcars") %>% head(3)
```

```{r}
theAvgCar <- mtcars %>%
summarise_all(function(x) round(mean(x), 2))
theAvgCar
```

```{r}
dbWriteTable(db, "mtcars", theAvgCar, append = TRUE)
dbGetQuery(db, "SELECT * FROM mtcars") %>% tail(3)
```

```{r}
dbWriteTable(db, "mtcars", mtcars, overwrite = TRUE)
dbGetQuery(db,"SELECT * FROM mtcars") %>% tail(3)
```

```{r}
res <- dbSendQuery(db,
"SELECT * FROM mtcars WHERE cyl = 4")
while(!dbHasCompleted(res)){
chunk <- dbFetch(res, n = 5)
print(nrow(chunk))
}
```

```{r}
dbClearResult(res)
```

```{r}
dbDisconnect(db)
if("discoCopy.db" %in% list.files("dados")){
file.remove("dados/discoCopy.db")
}
```

```{r}
airports <- read_csv("dados/airports.csv",
                     col_types = "cccccdd")
airlines <- read_csv("dados/airlines.csv",
                     col_types = "cc")
air <- dbConnect(SQLite(), dbname="dados/air.db")
dbWriteTable(air, name = "airports", airports)
dbWriteTable(air, name = "airlines", airlines)
dbListTables(air)
```

```{r}
dbDisconnect(air)
if("air.db" %in% list.files("dados/")){
file.remove("dados/air.db")
}
```

```{r}
library(tidyverse)
library(dbplyr)
db <- dbConnect(SQLite(), "dados/disco.db")
tracks <- tbl(db, "tracks")
tracks %>% head(3)
```

```{r}
meanTracks <- tracks %>%
group_by(AlbumId) %>%
summarise(AvLen = mean(Milliseconds, na.rm = TRUE),
AvCost = mean(UnitPrice, na.rm = TRUE))
meanTracks
```

```{r}
meanTracks %>% show_query()
```

```{r}
mT <- meanTracks %>% collect()
mT
```

```{r}
dbDisconnect(db)
```
